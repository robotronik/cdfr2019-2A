ARM GAS  /tmp/ccDcWj81.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_stm32f3xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	SystemInit
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	SystemInit:
  28              	.LFB695:
  29              		.file 1 "Src/system_stm32f3xx.c"
   1:Src/system_stm32f3xx.c **** /**
   2:Src/system_stm32f3xx.c ****   ******************************************************************************
   3:Src/system_stm32f3xx.c ****   * @file    system_stm32f3xx.c
   4:Src/system_stm32f3xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f3xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f3xx.c ****   *
   7:Src/system_stm32f3xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Src/system_stm32f3xx.c ****   *    user application:
   9:Src/system_stm32f3xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f3xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f3xx.c ****   *                      the "startup_stm32f3xx.s" file.
  12:Src/system_stm32f3xx.c ****   *
  13:Src/system_stm32f3xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f3xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32f3xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f3xx.c ****   *
  17:Src/system_stm32f3xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f3xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f3xx.c ****   *                                 during program execution.
  20:Src/system_stm32f3xx.c ****   *
  21:Src/system_stm32f3xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Src/system_stm32f3xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f3xx.s" file, to
  23:Src/system_stm32f3xx.c ****   *    configure the system clock before to branch to main program.
  24:Src/system_stm32f3xx.c ****   *
  25:Src/system_stm32f3xx.c ****   * 3. This file configures the system clock as follows:
  26:Src/system_stm32f3xx.c ****   *=============================================================================
  27:Src/system_stm32f3xx.c ****   *                         Supported STM32F3xx device
  28:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  29:Src/system_stm32f3xx.c ****   *        System Clock source                    | HSI
ARM GAS  /tmp/ccDcWj81.s 			page 2


  30:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  31:Src/system_stm32f3xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  33:Src/system_stm32f3xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  35:Src/system_stm32f3xx.c ****   *        AHB Prescaler                          | 1
  36:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  37:Src/system_stm32f3xx.c ****   *        APB2 Prescaler                         | 1
  38:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  39:Src/system_stm32f3xx.c ****   *        APB1 Prescaler                         | 1
  40:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  41:Src/system_stm32f3xx.c ****   *        USB Clock                              | DISABLE
  42:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  43:Src/system_stm32f3xx.c ****   *=============================================================================
  44:Src/system_stm32f3xx.c ****   ******************************************************************************
  45:Src/system_stm32f3xx.c ****   * @attention
  46:Src/system_stm32f3xx.c ****   *
  47:Src/system_stm32f3xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  48:Src/system_stm32f3xx.c ****   *
  49:Src/system_stm32f3xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  50:Src/system_stm32f3xx.c ****   * are permitted provided that the following conditions are met:
  51:Src/system_stm32f3xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  52:Src/system_stm32f3xx.c ****   *      this list of conditions and the following disclaimer.
  53:Src/system_stm32f3xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  54:Src/system_stm32f3xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  55:Src/system_stm32f3xx.c ****   *      and/or other materials provided with the distribution.
  56:Src/system_stm32f3xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  57:Src/system_stm32f3xx.c ****   *      may be used to endorse or promote products derived from this software
  58:Src/system_stm32f3xx.c ****   *      without specific prior written permission.
  59:Src/system_stm32f3xx.c ****   *
  60:Src/system_stm32f3xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  61:Src/system_stm32f3xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  62:Src/system_stm32f3xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  63:Src/system_stm32f3xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  64:Src/system_stm32f3xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  65:Src/system_stm32f3xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  66:Src/system_stm32f3xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  67:Src/system_stm32f3xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  68:Src/system_stm32f3xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  69:Src/system_stm32f3xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  70:Src/system_stm32f3xx.c ****   *
  71:Src/system_stm32f3xx.c ****   ******************************************************************************
  72:Src/system_stm32f3xx.c ****   */
  73:Src/system_stm32f3xx.c **** 
  74:Src/system_stm32f3xx.c **** /** @addtogroup CMSIS
  75:Src/system_stm32f3xx.c ****   * @{
  76:Src/system_stm32f3xx.c ****   */
  77:Src/system_stm32f3xx.c **** 
  78:Src/system_stm32f3xx.c **** /** @addtogroup stm32f3xx_system
  79:Src/system_stm32f3xx.c ****   * @{
  80:Src/system_stm32f3xx.c ****   */
  81:Src/system_stm32f3xx.c **** 
  82:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Includes
  83:Src/system_stm32f3xx.c ****   * @{
  84:Src/system_stm32f3xx.c ****   */
  85:Src/system_stm32f3xx.c **** 
  86:Src/system_stm32f3xx.c **** #include "stm32f3xx.h"
ARM GAS  /tmp/ccDcWj81.s 			page 3


  87:Src/system_stm32f3xx.c **** 
  88:Src/system_stm32f3xx.c **** /**
  89:Src/system_stm32f3xx.c ****   * @}
  90:Src/system_stm32f3xx.c ****   */
  91:Src/system_stm32f3xx.c **** 
  92:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_TypesDefinitions
  93:Src/system_stm32f3xx.c ****   * @{
  94:Src/system_stm32f3xx.c ****   */
  95:Src/system_stm32f3xx.c **** 
  96:Src/system_stm32f3xx.c **** /**
  97:Src/system_stm32f3xx.c ****   * @}
  98:Src/system_stm32f3xx.c ****   */
  99:Src/system_stm32f3xx.c **** 
 100:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Defines
 101:Src/system_stm32f3xx.c ****   * @{
 102:Src/system_stm32f3xx.c ****   */
 103:Src/system_stm32f3xx.c **** #if !defined  (HSE_VALUE) 
 104:Src/system_stm32f3xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 105:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
 106:Src/system_stm32f3xx.c **** #endif /* HSE_VALUE */
 107:Src/system_stm32f3xx.c **** 
 108:Src/system_stm32f3xx.c **** #if !defined  (HSI_VALUE)
 109:Src/system_stm32f3xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 110:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
 111:Src/system_stm32f3xx.c **** #endif /* HSI_VALUE */
 112:Src/system_stm32f3xx.c **** 
 113:Src/system_stm32f3xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 114:Src/system_stm32f3xx.c ****      Internal SRAM. */
 115:Src/system_stm32f3xx.c **** /* #define VECT_TAB_SRAM */
 116:Src/system_stm32f3xx.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field.
 117:Src/system_stm32f3xx.c ****                                   This value must be a multiple of 0x200. */
 118:Src/system_stm32f3xx.c **** /**
 119:Src/system_stm32f3xx.c ****   * @}
 120:Src/system_stm32f3xx.c ****   */
 121:Src/system_stm32f3xx.c **** 
 122:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Macros
 123:Src/system_stm32f3xx.c ****   * @{
 124:Src/system_stm32f3xx.c ****   */
 125:Src/system_stm32f3xx.c **** 
 126:Src/system_stm32f3xx.c **** /**
 127:Src/system_stm32f3xx.c ****   * @}
 128:Src/system_stm32f3xx.c ****   */
 129:Src/system_stm32f3xx.c **** 
 130:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Variables
 131:Src/system_stm32f3xx.c ****   * @{
 132:Src/system_stm32f3xx.c ****   */
 133:Src/system_stm32f3xx.c ****   /* This variable is updated in three ways:
 134:Src/system_stm32f3xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 135:Src/system_stm32f3xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 136:Src/system_stm32f3xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 137:Src/system_stm32f3xx.c ****          Note: If you use this function to configure the system clock there is no need to
 138:Src/system_stm32f3xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 139:Src/system_stm32f3xx.c ****                updated automatically.
 140:Src/system_stm32f3xx.c ****   */
 141:Src/system_stm32f3xx.c **** uint32_t SystemCoreClock = 8000000;
 142:Src/system_stm32f3xx.c **** 
 143:Src/system_stm32f3xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
ARM GAS  /tmp/ccDcWj81.s 			page 4


 144:Src/system_stm32f3xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 145:Src/system_stm32f3xx.c **** 
 146:Src/system_stm32f3xx.c **** /**
 147:Src/system_stm32f3xx.c ****   * @}
 148:Src/system_stm32f3xx.c ****   */
 149:Src/system_stm32f3xx.c **** 
 150:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_FunctionPrototypes
 151:Src/system_stm32f3xx.c ****   * @{
 152:Src/system_stm32f3xx.c ****   */
 153:Src/system_stm32f3xx.c **** 
 154:Src/system_stm32f3xx.c **** /**
 155:Src/system_stm32f3xx.c ****   * @}
 156:Src/system_stm32f3xx.c ****   */
 157:Src/system_stm32f3xx.c **** 
 158:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Functions
 159:Src/system_stm32f3xx.c ****   * @{
 160:Src/system_stm32f3xx.c ****   */
 161:Src/system_stm32f3xx.c **** 
 162:Src/system_stm32f3xx.c **** /**
 163:Src/system_stm32f3xx.c ****   * @brief  Setup the microcontroller system
 164:Src/system_stm32f3xx.c ****   *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
 165:Src/system_stm32f3xx.c ****   * @param  None
 166:Src/system_stm32f3xx.c ****   * @retval None
 167:Src/system_stm32f3xx.c ****   */
 168:Src/system_stm32f3xx.c **** void SystemInit(void)
 169:Src/system_stm32f3xx.c **** {
  30              		.loc 1 169 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 170:Src/system_stm32f3xx.c ****   /* FPU settings ------------------------------------------------------------*/
 171:Src/system_stm32f3xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 172:Src/system_stm32f3xx.c ****     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  35              		.loc 1 172 5 view .LVU1
  36              		.loc 1 172 16 is_stmt 0 view .LVU2
  37 0000 1749     		ldr	r1, .L4
 173:Src/system_stm32f3xx.c ****   #endif
 174:Src/system_stm32f3xx.c **** 
 175:Src/system_stm32f3xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 176:Src/system_stm32f3xx.c ****   /* Set HSION bit */
 177:Src/system_stm32f3xx.c ****   RCC->CR |= 0x00000001U;
  38              		.loc 1 177 11 view .LVU3
  39 0002 184B     		ldr	r3, .L4+4
 178:Src/system_stm32f3xx.c **** 
 179:Src/system_stm32f3xx.c ****   /* Reset CFGR register */
 180:Src/system_stm32f3xx.c ****   RCC->CFGR &= 0xF87FC00CU;
  40              		.loc 1 180 13 view .LVU4
  41 0004 184A     		ldr	r2, .L4+8
 181:Src/system_stm32f3xx.c **** 
 182:Src/system_stm32f3xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 183:Src/system_stm32f3xx.c ****   RCC->CR &= 0xFEF6FFFFU;
 184:Src/system_stm32f3xx.c **** 
 185:Src/system_stm32f3xx.c ****   /* Reset HSEBYP bit */
 186:Src/system_stm32f3xx.c ****   RCC->CR &= 0xFFFBFFFFU;
 187:Src/system_stm32f3xx.c **** 
 188:Src/system_stm32f3xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
ARM GAS  /tmp/ccDcWj81.s 			page 5


 189:Src/system_stm32f3xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
 190:Src/system_stm32f3xx.c **** 
 191:Src/system_stm32f3xx.c ****   /* Reset PREDIV1[3:0] bits */
 192:Src/system_stm32f3xx.c ****   RCC->CFGR2 &= 0xFFFFFFF0U;
 193:Src/system_stm32f3xx.c **** 
 194:Src/system_stm32f3xx.c ****   /* Reset USARTSW[1:0], I2CSW and TIMs bits */
 195:Src/system_stm32f3xx.c ****   RCC->CFGR3 &= 0xFF00FCCCU;
  42              		.loc 1 195 14 view .LVU5
  43 0006 1948     		ldr	r0, .L4+12
 169:Src/system_stm32f3xx.c ****   /* FPU settings ------------------------------------------------------------*/
  44              		.loc 1 169 1 view .LVU6
  45 0008 10B4     		push	{r4}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 4, -4
 172:Src/system_stm32f3xx.c ****   #endif
  49              		.loc 1 172 16 view .LVU7
  50 000a D1F88840 		ldr	r4, [r1, #136]
  51 000e 44F47004 		orr	r4, r4, #15728640
  52 0012 C1F88840 		str	r4, [r1, #136]
 177:Src/system_stm32f3xx.c **** 
  53              		.loc 1 177 3 is_stmt 1 view .LVU8
 177:Src/system_stm32f3xx.c **** 
  54              		.loc 1 177 11 is_stmt 0 view .LVU9
  55 0016 1C68     		ldr	r4, [r3]
  56 0018 44F00104 		orr	r4, r4, #1
  57 001c 1C60     		str	r4, [r3]
 180:Src/system_stm32f3xx.c **** 
  58              		.loc 1 180 3 is_stmt 1 view .LVU10
 180:Src/system_stm32f3xx.c **** 
  59              		.loc 1 180 13 is_stmt 0 view .LVU11
  60 001e 5C68     		ldr	r4, [r3, #4]
  61 0020 2240     		ands	r2, r2, r4
  62 0022 5A60     		str	r2, [r3, #4]
 183:Src/system_stm32f3xx.c **** 
  63              		.loc 1 183 3 is_stmt 1 view .LVU12
 183:Src/system_stm32f3xx.c **** 
  64              		.loc 1 183 11 is_stmt 0 view .LVU13
  65 0024 1A68     		ldr	r2, [r3]
  66 0026 22F08472 		bic	r2, r2, #17301504
  67 002a 22F48032 		bic	r2, r2, #65536
  68 002e 1A60     		str	r2, [r3]
 186:Src/system_stm32f3xx.c **** 
  69              		.loc 1 186 3 is_stmt 1 view .LVU14
 186:Src/system_stm32f3xx.c **** 
  70              		.loc 1 186 11 is_stmt 0 view .LVU15
  71 0030 1A68     		ldr	r2, [r3]
  72 0032 22F48022 		bic	r2, r2, #262144
  73 0036 1A60     		str	r2, [r3]
 189:Src/system_stm32f3xx.c **** 
  74              		.loc 1 189 3 is_stmt 1 view .LVU16
 189:Src/system_stm32f3xx.c **** 
  75              		.loc 1 189 13 is_stmt 0 view .LVU17
  76 0038 5A68     		ldr	r2, [r3, #4]
  77 003a 22F4FE02 		bic	r2, r2, #8323072
  78 003e 5A60     		str	r2, [r3, #4]
 192:Src/system_stm32f3xx.c **** 
ARM GAS  /tmp/ccDcWj81.s 			page 6


  79              		.loc 1 192 3 is_stmt 1 view .LVU18
 192:Src/system_stm32f3xx.c **** 
  80              		.loc 1 192 14 is_stmt 0 view .LVU19
  81 0040 DA6A     		ldr	r2, [r3, #44]
  82 0042 22F00F02 		bic	r2, r2, #15
  83 0046 DA62     		str	r2, [r3, #44]
  84              		.loc 1 195 3 is_stmt 1 view .LVU20
  85              		.loc 1 195 14 is_stmt 0 view .LVU21
  86 0048 1A6B     		ldr	r2, [r3, #48]
 196:Src/system_stm32f3xx.c **** 
 197:Src/system_stm32f3xx.c ****   /* Disable all interrupts */
 198:Src/system_stm32f3xx.c ****   RCC->CIR = 0x00000000U;
  87              		.loc 1 198 12 view .LVU22
  88 004a 0024     		movs	r4, #0
 195:Src/system_stm32f3xx.c **** 
  89              		.loc 1 195 14 view .LVU23
  90 004c 1040     		ands	r0, r0, r2
 199:Src/system_stm32f3xx.c **** 
 200:Src/system_stm32f3xx.c **** #ifdef VECT_TAB_SRAM
 201:Src/system_stm32f3xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 202:Src/system_stm32f3xx.c **** #else
 203:Src/system_stm32f3xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  91              		.loc 1 203 13 view .LVU24
  92 004e 4FF00062 		mov	r2, #134217728
 195:Src/system_stm32f3xx.c **** 
  93              		.loc 1 195 14 view .LVU25
  94 0052 1863     		str	r0, [r3, #48]
 198:Src/system_stm32f3xx.c **** 
  95              		.loc 1 198 3 is_stmt 1 view .LVU26
 198:Src/system_stm32f3xx.c **** 
  96              		.loc 1 198 12 is_stmt 0 view .LVU27
  97 0054 9C60     		str	r4, [r3, #8]
  98              		.loc 1 203 3 is_stmt 1 view .LVU28
  99              		.loc 1 203 13 is_stmt 0 view .LVU29
 100 0056 8A60     		str	r2, [r1, #8]
 204:Src/system_stm32f3xx.c **** #endif
 205:Src/system_stm32f3xx.c **** }
 101              		.loc 1 205 1 view .LVU30
 102 0058 5DF8044B 		ldr	r4, [sp], #4
 103              	.LCFI1:
 104              		.cfi_restore 4
 105              		.cfi_def_cfa_offset 0
 106 005c 7047     		bx	lr
 107              	.L5:
 108 005e 00BF     		.align	2
 109              	.L4:
 110 0060 00ED00E0 		.word	-536810240
 111 0064 00100240 		.word	1073876992
 112 0068 0CC07FF8 		.word	-125845492
 113 006c CCFC00FF 		.word	-16712500
 114              		.cfi_endproc
 115              	.LFE695:
 117              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 118              		.align	1
 119              		.p2align 2,,3
 120              		.global	SystemCoreClockUpdate
 121              		.syntax unified
ARM GAS  /tmp/ccDcWj81.s 			page 7


 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
 126              	SystemCoreClockUpdate:
 127              	.LFB696:
 206:Src/system_stm32f3xx.c **** 
 207:Src/system_stm32f3xx.c **** /**
 208:Src/system_stm32f3xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 209:Src/system_stm32f3xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 210:Src/system_stm32f3xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 211:Src/system_stm32f3xx.c ****   *         other parameters.
 212:Src/system_stm32f3xx.c ****   *
 213:Src/system_stm32f3xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 214:Src/system_stm32f3xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 215:Src/system_stm32f3xx.c ****   *         based on this variable will be incorrect.
 216:Src/system_stm32f3xx.c ****   *
 217:Src/system_stm32f3xx.c ****   * @note   - The system frequency computed by this function is not the real
 218:Src/system_stm32f3xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 219:Src/system_stm32f3xx.c ****   *           constant and the selected clock source:
 220:Src/system_stm32f3xx.c ****   *
 221:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 222:Src/system_stm32f3xx.c ****   *
 223:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 224:Src/system_stm32f3xx.c ****   *
 225:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 226:Src/system_stm32f3xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 227:Src/system_stm32f3xx.c ****   *
 228:Src/system_stm32f3xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 229:Src/system_stm32f3xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 230:Src/system_stm32f3xx.c ****   *             in voltage and temperature.
 231:Src/system_stm32f3xx.c ****   *
 232:Src/system_stm32f3xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 233:Src/system_stm32f3xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 234:Src/system_stm32f3xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 235:Src/system_stm32f3xx.c ****   *              have wrong result.
 236:Src/system_stm32f3xx.c ****   *
 237:Src/system_stm32f3xx.c ****   *         - The result of this function could be not correct when using fractional
 238:Src/system_stm32f3xx.c ****   *           value for HSE crystal.
 239:Src/system_stm32f3xx.c ****   *
 240:Src/system_stm32f3xx.c ****   * @param  None
 241:Src/system_stm32f3xx.c ****   * @retval None
 242:Src/system_stm32f3xx.c ****   */
 243:Src/system_stm32f3xx.c **** void SystemCoreClockUpdate (void)
 244:Src/system_stm32f3xx.c **** {
 128              		.loc 1 244 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 245:Src/system_stm32f3xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 133              		.loc 1 245 3 view .LVU32
 134              	.LVL0:
 246:Src/system_stm32f3xx.c **** 
 247:Src/system_stm32f3xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 248:Src/system_stm32f3xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 135              		.loc 1 248 3 view .LVU33
 136              		.loc 1 248 12 is_stmt 0 view .LVU34
ARM GAS  /tmp/ccDcWj81.s 			page 8


 137 0000 134A     		ldr	r2, .L11
 138 0002 5368     		ldr	r3, [r2, #4]
 139              	.LVL1:
 249:Src/system_stm32f3xx.c **** 
 250:Src/system_stm32f3xx.c ****   switch (tmp)
 140              		.loc 1 250 3 is_stmt 1 view .LVU35
 248:Src/system_stm32f3xx.c **** 
 141              		.loc 1 248 7 is_stmt 0 view .LVU36
 142 0004 03F00C03 		and	r3, r3, #12
 143              	.LVL2:
 248:Src/system_stm32f3xx.c **** 
 144              		.loc 1 248 7 view .LVU37
 145 0008 082B     		cmp	r3, #8
 146 000a 0AD0     		beq	.L10
 147 000c 114B     		ldr	r3, .L11+4
 148              	.LVL3:
 149              	.L7:
 251:Src/system_stm32f3xx.c ****   {
 252:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 253:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 254:Src/system_stm32f3xx.c ****       break;
 255:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 256:Src/system_stm32f3xx.c ****       SystemCoreClock = HSE_VALUE;
 257:Src/system_stm32f3xx.c ****       break;
 258:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 259:Src/system_stm32f3xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 260:Src/system_stm32f3xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 261:Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 262:Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 263:Src/system_stm32f3xx.c **** 
 264:Src/system_stm32f3xx.c **** #if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
 265:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 266:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 267:Src/system_stm32f3xx.c ****       {
 268:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 269:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 270:Src/system_stm32f3xx.c ****       }
 271:Src/system_stm32f3xx.c ****       else
 272:Src/system_stm32f3xx.c ****       {
 273:Src/system_stm32f3xx.c ****         /* HSI oscillator clock selected as PREDIV1 clock entry */
 274:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
 275:Src/system_stm32f3xx.c ****       }
 276:Src/system_stm32f3xx.c **** #else      
 277:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 278:Src/system_stm32f3xx.c ****       {
 279:Src/system_stm32f3xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 280:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 281:Src/system_stm32f3xx.c ****       }
 282:Src/system_stm32f3xx.c ****       else
 283:Src/system_stm32f3xx.c ****       {
 284:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 285:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 286:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 287:Src/system_stm32f3xx.c ****       }
 288:Src/system_stm32f3xx.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
 289:Src/system_stm32f3xx.c ****       break;
 290:Src/system_stm32f3xx.c ****     default: /* HSI used as system clock */
ARM GAS  /tmp/ccDcWj81.s 			page 9


 291:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 292:Src/system_stm32f3xx.c ****       break;
 293:Src/system_stm32f3xx.c ****   }
 294:Src/system_stm32f3xx.c ****   /* Compute HCLK clock frequency ----------------*/
 295:Src/system_stm32f3xx.c ****   /* Get HCLK prescaler */
 296:Src/system_stm32f3xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 150              		.loc 1 296 3 is_stmt 1 view .LVU38
 151              		.loc 1 296 28 is_stmt 0 view .LVU39
 152 000e 104A     		ldr	r2, .L11
 153              		.loc 1 296 22 view .LVU40
 154 0010 1148     		ldr	r0, .L11+8
 155              		.loc 1 296 28 view .LVU41
 156 0012 5268     		ldr	r2, [r2, #4]
 157              	.LVL4:
 297:Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 298:Src/system_stm32f3xx.c ****   SystemCoreClock >>= tmp;
 158              		.loc 1 298 3 is_stmt 1 view .LVU42
 159              		.loc 1 298 19 is_stmt 0 view .LVU43
 160 0014 1149     		ldr	r1, .L11+12
 296:Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 161              		.loc 1 296 52 view .LVU44
 162 0016 C2F30312 		ubfx	r2, r2, #4, #4
 163              	.LVL5:
 296:Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 164              		.loc 1 296 7 view .LVU45
 165 001a 825C     		ldrb	r2, [r0, r2]	@ zero_extendqisi2
 166              		.loc 1 298 19 view .LVU46
 167 001c D340     		lsrs	r3, r3, r2
 168 001e 0B60     		str	r3, [r1]
 299:Src/system_stm32f3xx.c **** }
 169              		.loc 1 299 1 view .LVU47
 170 0020 7047     		bx	lr
 171              	.LVL6:
 172              	.L10:
 260:Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 173              		.loc 1 260 7 is_stmt 1 view .LVU48
 260:Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 174              		.loc 1 260 20 is_stmt 0 view .LVU49
 175 0022 5368     		ldr	r3, [r2, #4]
 176              	.LVL7:
 261:Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 177              		.loc 1 261 7 is_stmt 1 view .LVU50
 261:Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 178              		.loc 1 261 22 is_stmt 0 view .LVU51
 179 0024 5168     		ldr	r1, [r2, #4]
 180              	.LVL8:
 262:Src/system_stm32f3xx.c **** 
 181              		.loc 1 262 7 is_stmt 1 view .LVU52
 262:Src/system_stm32f3xx.c **** 
 182              		.loc 1 262 27 is_stmt 0 view .LVU53
 183 0026 C3F38343 		ubfx	r3, r3, #18, #4
 184              	.LVL9:
 277:Src/system_stm32f3xx.c ****       {
 185              		.loc 1 277 10 view .LVU54
 186 002a C903     		lsls	r1, r1, #15
 187              	.LVL10:
 262:Src/system_stm32f3xx.c **** 
ARM GAS  /tmp/ccDcWj81.s 			page 10


 188              		.loc 1 262 15 view .LVU55
 189 002c 03F10203 		add	r3, r3, #2
 190              	.LVL11:
 277:Src/system_stm32f3xx.c ****       {
 191              		.loc 1 277 7 is_stmt 1 view .LVU56
 277:Src/system_stm32f3xx.c ****       {
 192              		.loc 1 277 10 is_stmt 0 view .LVU57
 193 0030 03D4     		bmi	.L8
 280:Src/system_stm32f3xx.c ****       }
 194              		.loc 1 280 9 is_stmt 1 view .LVU58
 280:Src/system_stm32f3xx.c ****       }
 195              		.loc 1 280 44 is_stmt 0 view .LVU59
 196 0032 0B4A     		ldr	r2, .L11+16
 197 0034 02FB03F3 		mul	r3, r2, r3
 198              	.LVL12:
 280:Src/system_stm32f3xx.c ****       }
 199              		.loc 1 280 44 view .LVU60
 200 0038 E9E7     		b	.L7
 201              	.LVL13:
 202              	.L8:
 284:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 203              		.loc 1 284 9 is_stmt 1 view .LVU61
 284:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 204              		.loc 1 284 28 is_stmt 0 view .LVU62
 205 003a D26A     		ldr	r2, [r2, #44]
 206              	.LVL14:
 286:Src/system_stm32f3xx.c ****       }
 207              		.loc 1 286 9 is_stmt 1 view .LVU63
 286:Src/system_stm32f3xx.c ****       }
 208              		.loc 1 286 38 is_stmt 0 view .LVU64
 209 003c 0549     		ldr	r1, .L11+4
 284:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 210              		.loc 1 284 36 view .LVU65
 211 003e 02F00F02 		and	r2, r2, #15
 212              	.LVL15:
 284:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 213              		.loc 1 284 22 view .LVU66
 214 0042 0132     		adds	r2, r2, #1
 215              	.LVL16:
 286:Src/system_stm32f3xx.c ****       }
 216              		.loc 1 286 38 view .LVU67
 217 0044 B1FBF2F2 		udiv	r2, r1, r2
 218              	.LVL17:
 286:Src/system_stm32f3xx.c ****       }
 219              		.loc 1 286 54 view .LVU68
 220 0048 03FB02F3 		mul	r3, r3, r2
 221              	.LVL18:
 286:Src/system_stm32f3xx.c ****       }
 222              		.loc 1 286 54 view .LVU69
 223 004c DFE7     		b	.L7
 224              	.L12:
 225 004e 00BF     		.align	2
 226              	.L11:
 227 0050 00100240 		.word	1073876992
 228 0054 00127A00 		.word	8000000
 229 0058 00000000 		.word	.LANCHOR1
 230 005c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccDcWj81.s 			page 11


 231 0060 00093D00 		.word	4000000
 232              		.cfi_endproc
 233              	.LFE696:
 235              		.global	APBPrescTable
 236              		.global	AHBPrescTable
 237              		.global	SystemCoreClock
 238              		.section	.data.SystemCoreClock,"aw"
 239              		.align	2
 240              		.set	.LANCHOR0,. + 0
 243              	SystemCoreClock:
 244 0000 00127A00 		.word	8000000
 245              		.section	.rodata.AHBPrescTable,"a"
 246              		.align	2
 247              		.set	.LANCHOR1,. + 0
 250              	AHBPrescTable:
 251 0000 00       		.byte	0
 252 0001 00       		.byte	0
 253 0002 00       		.byte	0
 254 0003 00       		.byte	0
 255 0004 00       		.byte	0
 256 0005 00       		.byte	0
 257 0006 00       		.byte	0
 258 0007 00       		.byte	0
 259 0008 01       		.byte	1
 260 0009 02       		.byte	2
 261 000a 03       		.byte	3
 262 000b 04       		.byte	4
 263 000c 06       		.byte	6
 264 000d 07       		.byte	7
 265 000e 08       		.byte	8
 266 000f 09       		.byte	9
 267              		.section	.rodata.APBPrescTable,"a"
 268              		.align	2
 271              	APBPrescTable:
 272 0000 00       		.byte	0
 273 0001 00       		.byte	0
 274 0002 00       		.byte	0
 275 0003 00       		.byte	0
 276 0004 01       		.byte	1
 277 0005 02       		.byte	2
 278 0006 03       		.byte	3
 279 0007 04       		.byte	4
 280              		.text
 281              	.Letext0:
 282              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 283              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 284              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 285              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 286              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 287              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 288              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 289              		.file 9 "/usr/lib/gcc/arm-none-eabi/8.2.0/include/stddef.h"
 290              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 291              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
ARM GAS  /tmp/ccDcWj81.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f3xx.c
     /tmp/ccDcWj81.s:18     .text.SystemInit:0000000000000000 $t
     /tmp/ccDcWj81.s:27     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccDcWj81.s:110    .text.SystemInit:0000000000000060 $d
     /tmp/ccDcWj81.s:118    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccDcWj81.s:126    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccDcWj81.s:227    .text.SystemCoreClockUpdate:0000000000000050 $d
     /tmp/ccDcWj81.s:271    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccDcWj81.s:250    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccDcWj81.s:243    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccDcWj81.s:239    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccDcWj81.s:246    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccDcWj81.s:268    .rodata.APBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
